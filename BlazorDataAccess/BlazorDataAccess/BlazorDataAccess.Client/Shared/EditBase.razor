@using System.Linq.Expressions
@using System.Reflection
@using System.ComponentModel.DataAnnotations
@inherits ComponentBase

@code {

    [CascadingParameter]
    protected EditContext? CurrentEditContext { get; set; }
    
    [Parameter]
    public Expression<Func<object>>? For { get; set; }
    
    protected string? Label { get; set; }
    protected System.Reflection.PropertyInfo? Property;

    protected override void OnParametersSet()
    {
        if (For is null) 
            throw new InvalidOperationException("For is required");
        Property = GetMemberInfo(For) as System.Reflection.PropertyInfo;
        if (Property is null)
            throw new InvalidOperationException("For must be a property");

        Label = Property.Name;
        var displayName = Property.GetCustomAttributes<DisplayAttribute>().ToList().FirstOrDefault();
        if (displayName != null)
        {
            Label = displayName.Name;
        }
    }

    private System.Reflection.MemberInfo GetMemberInfo(Expression member)
    {
        if (member == null)
            throw new ArgumentNullException(nameof(member));

        if (member is not LambdaExpression lambda)
            throw new ArgumentException("Not a lambda expression", nameof(member));

        MemberExpression? memberExpr = null;

        if (lambda.Body.NodeType == ExpressionType.Convert)
        {
            memberExpr = ((UnaryExpression)lambda.Body)?.Operand as MemberExpression;;
        }
        else if (lambda.Body.NodeType == ExpressionType.MemberAccess)
        {
            memberExpr = lambda.Body as MemberExpression;
        }

        if (memberExpr == null)
            throw new ArgumentException("Not a member expression", nameof(member));
        
        return memberExpr.Member;
    }
}